// lib/main.dart
import 'package:flutter/material.dart';
import 'package:google_generative_ai/google_generative_ai.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';

void main() {
  runApp(const TranslatorApp());
}

class TranslatorApp extends StatelessWidget {
  const TranslatorApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Translator App',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        useMaterial3: true,
      ),
      home: const TranslatorHome(),
    );
  }
}

// Models
class TranslationResult {
  final String word;
  final Map<String, String> definitions;
  final Map<String, List<String>> synonyms;
  final Map<String, List<String>> antonyms;
  final Map<String, Map<String, String>> conjugation;
  final List<Example> examples;

  TranslationResult({
    required this.word,
    required this.definitions,
    required this.synonyms,
    required this.antonyms,
    required this.conjugation,
    required this.examples,
  });

  factory TranslationResult.fromJson(Map<String, dynamic> json) {
    return TranslationResult(
      word: json['word'] ?? '',
      definitions: Map<String, String>.from(json['definitions'] ?? {}),
      synonyms: Map<String, List<String>>.from(
        (json['synonyms'] ?? {}).map(
          (k, v) => MapEntry(k, List<String>.from(v ?? [])),
        ),
      ),
      antonyms: Map<String, List<String>>.from(
        (json['antonyms'] ?? {}).map(
          (k, v) => MapEntry(k, List<String>.from(v ?? [])),
        ),
      ),
      conjugation: Map<String, Map<String, String>>.from(
        (json['conjugation'] ?? {}).map(
          (k, v) => MapEntry(
            k,
            Map<String, String>.from(v ?? {}),
          ),
        ),
      ),
      examples: (json['examples'] as List? ?? [])
          .map((e) => Example.fromJson(e))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() => {
        'word': word,
        'definitions': definitions,
        'synonyms': synonyms,
        'antonyms': antonyms,
        'conjugation': conjugation,
        'examples': examples.map((e) => e.toJson()).toList(),
      };
}

class Example {
  final String scenario;
  final String english;
  final String swedish;
  final String arabic;

  Example({
    required this.scenario,
    required this.english,
    required this.swedish,
    required this.arabic,
  });

  factory Example.fromJson(Map<String, dynamic> json) {
    return Example(
      scenario: json['scenario'] ?? '',
      english: json['english'] ?? '',
      swedish: json['swedish'] ?? '',
      arabic: json['arabic'] ?? '',
    );
  }

  Map<String, dynamic> toJson() => {
        'scenario': scenario,
        'english': english,
        'swedish': swedish,
        'arabic': arabic,
      };
}

// Services
class TranslationService {
  final GenerativeModel model;
  
  TranslationService({required String apiKey}) 
      : model = GenerativeModel(
          model: 'gemini-2.0-flash-exp',
          apiKey: apiKey,
          generationConfig: GenerationConfig(responseMimeType: "application/json")
        );

  Future<TranslationResult> translate(String text, String fromLang, String toLang) async {
    try {
      final prompt = '''
        Translate the word "$text" from $fromLang to $toLang and provide detailed information in this JSON format:
        {
          "word": "$text",
          "definitions": {
            "english": "",
            "swedish": "",
            "arabic": ""
          },
          "synonyms": {
            "english": [],
            "swedish": [],
            "arabic": []
          },
          "antonyms": {
            "english": [],
            "swedish": [],
            "arabic": []
          },
          "conjugation": {...},
          "examples": [10 exmaples with diffrents scinarios]
        }
        
        Please ensure the response is valid JSON and includes all languages (English, Swedish, Arabic).
      ''';

      final content = Content.text(prompt);
      final response = await model.generateContent([content]);
      final jsonResponse = json.decode(response.text??'[]');
      print(jsonResponse);
      return TranslationResult.fromJson(jsonResponse);
    } catch (e) {
      throw Exception('Translation failed: $e');
    }
  }
}

// Screens
class TranslatorHome extends StatefulWidget {
  const TranslatorHome({super.key});

  @override
  State<TranslatorHome> createState() => _TranslatorHomeState();
}

class _TranslatorHomeState extends State<TranslatorHome> {
  final TextEditingController _textController = TextEditingController();
  TranslationResult? _result;
  final TranslationService _service = TranslationService(
    apiKey: 'API key', // Replace with your API key
  );
  String _fromLang = 'English';
  String _toLang = 'Swedish';
  List<TranslationResult> _favorites = [];
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _loadFavorites();
  }

  Future<void> _loadFavorites() async {
    final prefs = await SharedPreferences.getInstance();
    final favoritesJson = prefs.getStringList('favorites') ?? [];
    setState(() {
      _favorites = favoritesJson
          .map((json) => TranslationResult.fromJson(jsonDecode(json)))
          .toList();
    });
  }

  Future<void> _saveFavorites() async {
    final prefs = await SharedPreferences.getInstance();
    final favoritesJson = _favorites
        .map((result) => jsonEncode(result.toJson()))
        .toList();
    await prefs.setStringList('favorites', favoritesJson);
  }

  void _toggleFavorite(TranslationResult result) {
    setState(() {
      if (_favorites.any((f) => f.word == result.word)) {
        _favorites.removeWhere((f) => f.word == result.word);
      } else {
        _favorites.add(result);
      }
    });
    _saveFavorites();
  }

  Future<void> _translate() async {
    if (_textController.text.isEmpty) return;

    setState(() => _isLoading = true);
    
    try {
      final result = await _service.translate(
        _textController.text,
        _fromLang,
        _toLang,
      );
      
      setState(() {
        _result = result;
        _isLoading = false;
      });
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Translation failed: $e')),
      );
      setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 2,
      child: Scaffold(
        appBar: AppBar(
          title: const Text('Translator'),
          bottom: const TabBar(
            tabs: [
              Tab(text: 'Translate'),
              Tab(text: 'Favorites'),
            ],
          ),
        ),
        body: TabBarView(
          children: [
            _buildTranslateTab(),
            _buildFavoritesTab(),
          ],
        ),
      ),
    );
  }

  Widget _buildTranslateTab() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        children: [
          Row(
            children: [
              Expanded(
                child: DropdownButton<String>(
                  value: _fromLang,
                  items: ['English', 'Swedish', 'Arabic']
                      .map((lang) => DropdownMenuItem(
                            value: lang,
                            child: Text(lang),
                          ))
                      .toList(),
                  onChanged: (value) {
                    setState(() => _fromLang = value!);
                  },
                ),
              ),
              const Icon(Icons.swap_horiz),
              Expanded(
                child: DropdownButton<String>(
                  value: _toLang,
                  items: ['English', 'Swedish', 'Arabic']
                      .map((lang) => DropdownMenuItem(
                            value: lang,
                            child: Text(lang),
                          ))
                      .toList(),
                  onChanged: (value) {
                    setState(() => _toLang = value!);
                  },
                ),
              ),
            ],
          ),
          TextField(
            controller: _textController,
            decoration: const InputDecoration(
              hintText: 'Enter text to translate',
            ),
          ),
          const SizedBox(height: 16),
          ElevatedButton(
            onPressed: _isLoading ? null : _translate,
            child: _isLoading
                ? const CircularProgressIndicator()
                : const Text('Translate'),
          ),
          if (_result != null) ...[
            const SizedBox(height: 16),
            Expanded(
              child: _buildTranslationResult(_result!),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildFavoritesTab() {
    return ListView.builder(
      itemCount: _favorites.length,
      itemBuilder: (context, index) {
        final result = _favorites[index];
        return ListTile(
          title: Text(result.word),
          subtitle: Text(result.definitions[_toLang.toLowerCase()] ?? ''),
          trailing: IconButton(
            icon: const Icon(Icons.favorite),
            color: Colors.red,
            onPressed: () => _toggleFavorite(result),
          ),
          onTap: () {
            showDialog(
              context: context,
              builder: (context) => Dialog(
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: _buildTranslationResult(result),
                ),
              ),
            );
          },
        );
      },
    );
  }

  Widget _buildTranslationResult(TranslationResult result) {
    return SingleChildScrollView(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                result.word,
                style: Theme.of(context).textTheme.headlineSmall,
              ),
              IconButton(
                icon: Icon(
                  _favorites.any((f) => f.word == result.word)
                      ? Icons.favorite
                      : Icons.favorite_border,
                ),
                color: Colors.red,
                onPressed: () => _toggleFavorite(result),
              ),
            ],
          ),
          const SizedBox(height: 16),
          Text(
            'Definitions',
            style: Theme.of(context).textTheme.titleMedium,
          ),
          ...result.definitions.entries.map(
            (e) => ListTile(
              title: Text(e.key.capitalize()),
              subtitle: Text(e.value),
            ),
          ),
          const SizedBox(height: 16),
          Text(
            'Conjugation',
            style: Theme.of(context).textTheme.titleMedium,
          ),
          ...result.conjugation.entries.map(
            (lang) => ExpansionTile(
              title: Text(lang.key.capitalize()),
              children: lang.value.entries.map(
                (conj) => ListTile(
                  title: Text(conj.key.replaceAll('_', ' ').capitalize()),
                  subtitle: Text(conj.value),
                ),
              ).toList(),
            ),
          ),
          const SizedBox(height: 16),
          Text(
            'Examples',
            style: Theme.of(context).textTheme.titleMedium,
          ),
          ...result.examples.map(
            (example) => ExpansionTile(
              title: Text(example.scenario),
              children: [
                ListTile(
                  title: const Text('English'),
                  subtitle: Text(example.english),
                ),
                ListTile(
                  title: const Text('Swedish'),
                  subtitle: Text(example.swedish),
                ),
                ListTile(
                  title: const Text('Arabic'),
                  subtitle: Text(example.arabic),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _textController.dispose();
    super.dispose();
  }
}

extension StringExtension on String {
  String capitalize() {
    return "${this[0].toUpperCase()}${substring(1)}";
  }
}